# Generated by Django 4.1.7 on 2023-03-20 22:24

import account_app.validations
from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('taggit', '0005_auto_20220424_2025'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('email_validated', models.BooleanField(default=False)),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=30)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Recruiter',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
                ('company_name', models.CharField(max_length=100)),
                ('website', models.URLField(blank=True)),
                ('location_name', models.CharField(blank=True, max_length=100, validators=[account_app.validations.validate_location])),
                ('location_coordinates', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('logo', models.ImageField(blank=True, upload_to='logo/')),
                ('description', tinymce.models.HTMLField(blank=True)),
                ('category', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('user_profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Intern',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
                ('phone_number', models.CharField(max_length=15)),
                ('education', tinymce.models.HTMLField(blank=True)),
                ('organization_experience', tinymce.models.HTMLField(blank=True)),
                ('work_experience', tinymce.models.HTMLField(blank=True)),
                ('awards', tinymce.models.HTMLField(blank=True)),
                ('img_profile', models.ImageField(blank=True, upload_to='profile_img/')),
                ('location_name', models.CharField(blank=True, max_length=100, validators=[account_app.validations.validate_location])),
                ('location_coordinates', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('cv', models.FileField(blank=True, upload_to='cv/', validators=[account_app.validations.validate_employee_cv])),
                ('skills', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('user_profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
